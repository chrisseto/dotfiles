# Use Ctrl-<space> as our prefix.
unbind C-space
set -g prefix C-space

# Vim/Neovim Specific Tweaks and recommentations.
# Address vim mode switching delay. (Remove lag from esc + key -> alt code) (http://superuser.com/a/252717/65504)
set -s escape-time 0
# Pass focus events to applications so they can resize/repaint.
set -g focus-events on
# Upgrade to $TERM to support true colors and italics.
set -s default-terminal 'tmux-256color'
# Enable truecolor support when inside tmux.
set -as terminal-features ",$TERM:RGB"

# Always enable Mouse Support.
set -g mouse on

# Configure clipboard access.
# See also https://github.com/tmux/tmux/wiki/Clipboard#quick-summary
set -s set-clipboard external
set -as terminal-features ",$TERM:clipboard"

# Increase the default scrollback buffer of 2k to 50k.
set -g history-limit 50000

# Increase the amount of time that messages are displayed for.
set -g display-time 2000
set -g display-panes-time 1000

# On darwin, run commands through reattach-to-user-namespace to make copypasta
# work as expected.
if-shell -b '[ $(uname) = "Darwin" ]' {
  set default-command "reattach-to-user-namespace -l $SHELL"
}

# Status Bar configurations.
set -g status-interval 5
set -g status-position top

set -g status-right "#[fg=cyan,bg=green]#[default] %a %b %d %Y %H:%M %Z "
set -g status-right-style "fg=black,bg=cyan"
set -g status-right-length 80

set -g status-left " #(hostname -s) #[fg=cyan,bg=green]"
set -g status-left-style "fg=black,bg=cyan"
set -g status-left-length 80

set -g status-justify centre
set -g status-style "fg=black,bg=green"
set -g window-status-format " #I #W "
set -g window-status-current-format "#[fg=colour232,bg=colour252,noreverse] #I #W "

unbind r
bind r {
  source-file ~/.config/tmux/tmux.conf
  display "Config reloaded"
}

# Pass through certain environment variables to help with SSH agent forwarding
# and tmux nesting.
set -g update-environment \
  "SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  TMUX_IN_TMUX"

## Tmux Nesting.
# The approach below was adapted from the following resources:
# https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
# https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
# See Also toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
#
# Rather than having to jump over hoops and/or remember specific key bindings
# when running in a nested tmux configuration, we bind a non-prefixed hotkey
# that disables all hotkeys on the outer tmux session with the exception of the
# hotkey to re-enable all hotkeys. When the outer session is disabled, we'll
# provide some visual feedback to indicate as much.

# That might be weird if I ever run TMUX on a remote machine without first
# being in tmux but I'll worry about that when I get there.
if-shell '[ "$TMUX_IN_TMUX" == "1" ] || [ -n "$SSH_AUTH_SOCK" ]' {
  # When we're in a nested tmux, drop the bar onto the bottom and disable the clock widget.
  set -g status-position bottom
  set -g status-right "#[fg=cyan,bg=green]#[default]                      "
}

bind -T root F12 {
  # Step 1: Disable the listening of key bindings on the "outer" tmux.
  set prefix None
  set key-table off
  
  # Step 2: Provide some visual feedback that the "outer" tmux is no longer
  # listening for key bindings with the exception of the below one.
  # In this case, set the title bar to a dull color and disable the clock widget.
  set status-style "fg=black,bg=grey"
  
  # Step 3: Refresh the client.
  refresh-client -S
}

bind -T off F12 {
  # Step 1: Re-enable out listening of all key bindings.
  set -u prefix
  set -u key-table

  # Step 2: Remove out visual feedback indicators.
  set -u status-style

  # Step 3: Refresh the client.
  refresh-client -S
}

########################################################################
# Below this line are old/legacy values that have been around forever. #
# Some things may be wrong, invalid or unused.                         #
########################################################################

# Make cycling through panes really easy (hold ctrl and press space twice)
unbind C-space
bind C-space select-pane -t :.+

# renumber windows upon closing
set -g renumber-windows on

# Use vim keybindings
setw -g mode-keys vi
set -g status-keys vi
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel

# create windows and panes in current directory
unbind '"'
bind '"' split-window -c "#{pane_current_path}"

unbind %
bind % split-window -h -c "#{pane_current_path}"

# Use t for creating new panes, like tabs in OSX
unbind t
bind t split-window -h -c "#{pane_current_path}"

unbind C-t
bind C-t split-window -c "#{pane_current_path}"

unbind c
bind c new-window -c "#{pane_current_path}"

unbind C-c
bind C-c new-window -c "#{pane_current_path}"

# Choose session
unbind S
bind S choose-session

# Cycle windows with ctrl-shift left/right
unbind -n C-S-Left
bind-key -n C-S-Left select-window -t :-
unbind -n C-S-Right
bind-key -n C-S-Right select-window -t :+

# Move windows with Prefix-left/right
unbind Left
bind-key Left swap-window -t -1
unbind Right
bind-key Right swap-window -t +1

# Layouts
#########

# Tile all
bind = select-layout tiled

bind + select-layout main-horizontal

# Navigate panes
################

# Make cycling through panes really easy (hold ctrl and press space twice)
bind C-space select-pane -t :.+

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Cycle through windows
bind l select-window -t :+
bind h select-window -t :-

# Closing panes, windows and sessions
#####################################

# Using w for closing, like in  OSX
# close panes
unbind w
bind w kill-pane
# close window
unbind C-w
bind C-w kill-window

# close sessions with q
unbind q
bind q confirm kill-session
# close server with ctrl-q
unbind C-q
bind C-q confirm kill-server

# Choose windows and sessions with tab
######################################

bind tab choose-window

# Use Ctrl-<space> as our prefix.
unbind C-space
set -g prefix C-space

# Vim/Neovim Specific Tweaks and recommentations.
# Address vim mode switching delay. (Remove lag from esc + key -> alt code) (http://superuser.com/a/252717/65504)
set -s escape-time 0
# Pass focus events to applications so they can resize/repaint.
set -g focus-events on
# Upgrade to $TERM to support true colors.
set -s default-terminal 'screen-256color'
# TODO what does/did this do?
# set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'
set-option -sa terminal-overrides ',alacritty:RGB'

# Always enable Mouse Support.
set -g mouse on

# Increase the default scrollback buffer of 2k to 50k.
set -g history-limit 50000

# Increase the amount of time that messages are displayed for.
set -g display-time 2000
set -g display-panes-time 1000

# On darwin, run commands through reattach-to-user-namespace to make copypasta
# work as expected.
if-shell -b '[ $(uname) = "Darwin" ]' {
  set default-command "reattach-to-user-namespace -l $SHELL"
}

########################################################################
# Below this line are old/legacy values that have been around forever. #
# Some things may be wrong, invalid or unused.                         #
########################################################################

# Make cycling through panes really easy (hold ctrl and press space twice)
unbind C-space
bind C-space select-pane -t :.+

# renumber windows upon closing
set -g renumber-windows on

# Use vim keybindings
setw -g mode-keys vi
set -g status-keys vi

# status line
set -g status-justify left
set -g status-bg colour2
set -g status-fg colour0
set -g status-interval 5

set -g status-left-length 32
set -g status-right-length 150

set -g status-right "#(date +\"%c\")"
set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]#[fg=colour245,bg=colour238,bold] #(hostname -s) #[fg=colour238,bg=colour2,nobold]'

set -g window-status-format "#[fg=colour0, bg=colour2] #I #W "
set -g window-status-current-format "#[fg=colour2,bg=colour252]#[fg=colour232,bg=colour252,noreverse] #I #W #[fg=colour252,bg=colour2,nobold]"

# reload tmux config
unbind r
bind r \
    source-file ~/.config/tmux.conf \;\
    display 'Reloaded tmux config.'

# create windows and panes in current directory
unbind '"'
bind '"' split-window -c "#{pane_current_path}"

unbind %
bind % split-window -h -c "#{pane_current_path}"

# Use t for creating new panes, like tabs in OSX
unbind t
bind t split-window -h -c "#{pane_current_path}"

unbind C-t
bind C-t split-window -c "#{pane_current_path}"

unbind c
bind c new-window -c "#{pane_current_path}"

unbind C-c
bind C-c new-window -c "#{pane_current_path}"

# Choose session
unbind S
bind S choose-session

# Cycle windows with ctrl-shift left/right
unbind -n C-S-Left
bind-key -n C-S-Left select-window -t :-
unbind -n C-S-Right
bind-key -n C-S-Right select-window -t :+

# Move windows with Prefix-left/right
unbind Left
bind-key Left swap-window -t -1
unbind Right
bind-key Right swap-window -t +1

# Layouts
#########

# Tile all
bind = select-layout tiled

bind + select-layout main-horizontal

# Navigate panes
################

# Make cycling through panes really easy (hold ctrl and press space twice)
bind C-space select-pane -t :.+

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Cycle through windows
bind l select-window -t :+
bind h select-window -t :-

# Closing panes, windows and sessions
#####################################

# Using w for closing, like in  OSX
# close panes
unbind w
bind w kill-pane
# close window
unbind C-w
bind C-w kill-window

# close sessions with q
unbind q
bind q confirm kill-session
# close server with ctrl-q
unbind C-q
bind C-q confirm kill-server

# Choose windows and sessions with tab
######################################

bind tab choose-window

# Make copy-n-paste work on OSX
###############################

# Setup 'v' to begin selection as in Vim
# bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
# https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
# bind -T root F12  \
#     set prefix None \;\
#     set key-table off \;\
#     set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
#     set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
#     set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
#     if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
#     refresh-client -S \;\
# 
# bind -T off F12 \
#   set -u prefix \;\
#   set -u key-table \;\
#   set -u status-style \;\
#   set -u window-status-current-style \;\
#   set -u window-status-current-format \;\
#   refresh-client -S

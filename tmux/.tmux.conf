# set prefix key to space
unbind C-space
set -g prefix C-space

# Make cycling through panes really easy (hold ctrl and press space twice)
unbind C-space
bind C-space select-pane -t :.+

# renumber windows upon closing
set -g renumber-windows on

# screen mode
set -g default-terminal "screen-256color"

# Use vim keybindings
setw -g mode-keys vi
set -g status-keys vi
setw -g utf8 on
# use mouse in copy mode
setw -g mode-mouse on

# status line
set -g status-utf8 on
set -g status-justify left
set -g status-bg colour2
set -g status-fg colour0
set -g status-interval 2

set -g status-left-length 32
set -g status-right-length 150

set -g pane-border-fg colour255
set -g pane-active-border-fg colour2

set -g status-right "#(date +\"%c\")"
set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(hostname -s) #[fg=colour238,bg=colour2,nobold]⮀'

set -g window-status-format "#[fg=colour0, bg=colour2] #I #W "
set -g window-status-current-format "#[fg=colour2,bg=colour252]⮀#[fg=colour232,bg=colour252,noreverse] #I #W #[fg=colour252,bg=colour2,nobold]⮀"

# reload tmux config
unbind r
bind r \
    source-file ~/.tmux.conf \;\
    display 'Reloaded tmux config.'

# create windows and panes in current directory
unbind '"'
bind '"' split-window -c "#{pane_current_path}"

unbind %
bind % split-window -h -c "#{pane_current_path}"

# Use t for creating new panes, like tabs in OSX
unbind t
bind t split-window -h -c "#{pane_current_path}"

unbind C-t
bind C-t split-window -c "#{pane_current_path}"

unbind c
bind c new-window -c "#{pane_current_path}"

unbind C-c
bind C-c new-window -c "#{pane_current_path}"

# Choose session
unbind S
bind S choose-session

# Cycle windows with ctrl-shift left/right
unbind -n C-S-Left
bind-key -n C-S-Left select-window -t :-
unbind -n C-S-Right
bind-key -n C-S-Right select-window -t :+

# Move windows with Prefix-left/right
unbind Left
bind-key Left swap-window -t -1
unbind Right
bind-key Right swap-window -t +1

# Layouts
#########

# Tile all
bind = select-layout tiled

bind + select-layout main-horizontal

# Mouse mode
############

# Toggle mouse on
unbind m
bind m \
    set -g mode mouse on
    set -g mouse-select-pane on
    set-option -g -q mouse on \;\
    bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M" \;\
    bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M" \;\
    bind-key -t vi-copy WheelUpPane halfpage-up \;\
    bind-key -t vi-copy WheelDownPane halfpage-down \;\
    display 'Mouse: ON'

# Navigate panes
################

# Make cycling through panes really easy (hold ctrl and press space twice)
bind C-space select-pane -t :.+

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind C-l send-keys 'C-l'

# Cycle through windows
bind l select-window -t :+
bind h select-window -t :-

# bind -n C-n select-window -t :+
# bind -n C-p select-window -t :-
#bind-key -n C-Right select-window -t :+
#bind-key -n C-Left select-window -t :-

# Closing panes, windows and sessions
#####################################

# Using w for closing, like in  OSX
# close panes
unbind w
bind w kill-pane
# close window
unbind C-w
bind C-w kill-window

# close sessions with q
unbind q
bind q confirm kill-session
# close server with ctrl-q
unbind C-q
bind C-q confirm kill-server

# Choose windows and sessions with tab
######################################

bind tab choose-window

# Make copy-n-paste work on OSX
###############################

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'

# Uncomment for OSX compatibility
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# set-option -g default-command "reattach-to-user-namespace -l zsh"

# Remove lag from esc + key -> alt code
# IE make neovim usable
set -sg escape-time 0
